### Teste do CRUD de Clientes - Sistema de Aluguel de Carros
### Baseado no UML da classe Cliente

### 1. Criar Cliente (CREATE)
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "1234567890",
  "cpf": "123.456.789-00",
  "nome": "João Silva",
  "endereco": "Rua das Flores, 123, Centro",
  "profissao": "Engenheiro"
}

### 2. Criar outro Cliente
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "0987654321",
  "cpf": "987.654.321-00",
  "nome": "Maria Santos",
  "endereco": "Av. Principal, 456, Bairro Novo",
  "profissao": "Médica"
}

### 3. Buscar todos os clientes (READ - Lista)
GET http://localhost:8080/api/clientes

### 4. Buscar cliente por ID (READ - Individual)
GET http://localhost:8080/api/clientes/1

### 5. Buscar cliente por CPF
GET http://localhost:8080/api/clientes/cpf/123.456.789-00

### 6. Buscar cliente por RG
GET http://localhost:8080/api/clientes/rg/1234567890

### 7. Buscar clientes por nome
GET http://localhost:8080/api/clientes/buscar?nome=João

### 8. Atualizar cliente (UPDATE)
PUT http://localhost:8080/api/clientes/1
Content-Type: application/json

{
  "rg": "1234567890",
  "cpf": "123.456.789-00",
  "nome": "João Silva Santos",
  "endereco": "Rua das Flores, 123, Centro, São Paulo",
  "profissao": "Engenheiro de Software"
}

### 9. Desativar cliente (DELETE - Soft Delete)
DELETE http://localhost:8080/api/clientes/1

### 10. Reativar cliente
PUT http://localhost:8080/api/clientes/1/ativar

### 11. Remover cliente permanentemente (DELETE - Hard Delete)
DELETE http://localhost:8080/api/clientes/1/hard

### 12. Teste de validação - CPF inválido
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "1111111111",
  "cpf": "123.456.789",
  "nome": "Cliente Teste",
  "endereco": "Endereço Teste",
  "profissao": "Profissão Teste"
}

### 13. Teste de validação - Campos obrigatórios
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "",
  "cpf": "",
  "nome": "",
  "endereco": "",
  "profissao": ""
}

### 14. Teste de duplicação - CPF já existente
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "2222222222",
  "cpf": "123.456.789-00",
  "nome": "Outro Cliente",
  "endereco": "Outro Endereço",
  "profissao": "Outra Profissão"
}

### 15. Teste de duplicação - RG já existente
POST http://localhost:8080/api/clientes
Content-Type: application/json

{
  "rg": "1234567890",
  "cpf": "111.222.333-44",
  "nome": "Mais Um Cliente",
  "endereco": "Mais Um Endereço",
  "profissao": "Mais Uma Profissão"
}
